#+title: Pattern Matching

* RegEx
- RegEx is a pattern matching template to filter text.
- BRE: POSIX Basic Regular Expression engine
- ERE: POSIX Extended Regular Expression engine

** Special Characters (BRE and ERE)

| Character(s) | Description |
| ~.~         | Any single character except null or newline |
| ~*~          | Zero or more of *preceding* character/expression   |
| ~[]~       | Any of the enclosed characters/class, hyphen ~-~ indicates character range                              |
| ~^~          | Anchor for beginning of line or *negation* of enclosed characters when used as ~[^]~   |
| ~$~          | Anchor for end of line |
| ~\~          | Escape special characters |


** Special Characters (BRE)

| Character(s) | Description |
| ~\{n,m\}~    | Range of occurrences of preceding pattern at least ~n~ and utmost ~m~ times     |
| ~(\)~      | Grouping of regular expressions |
| ~\n~       | Newline              |
| ~\r~       | Carriage return      |
| ~\t~       | Tab                  |
| ~\0~       | Null character       |

** Special Characters (ERE)

| Character(s) | Description                                                                   |
| ~{n,m}~      | Range of occurrences of preceding pattern at least ~n~ and utmost ~m~ times     |
| ~()~         | Grouping of regular expressions                                                |
| ~+~          | One of more of preceding character/expression                                 |
| ~?~          | Zero of one of preceding character/expression                                 |
| ~|~                  | Logical OR over the patterns                                                  |


** Character Classes
- Character classes follow specific structure, ~[:class-name:]~
- The classes should be used within character enclosure braces as ~[character-class]~

| Class            | Represents       |
| ~[[:print:]]~    | Printable        |
| ~[[:alnum:]]~    | Alphanumeric     |
| ~[[:alpha:]]~    | Alphabetic       |
| ~[[:lower:]]~    | Lower case       |
| ~[[:upper:]]~    | Upper case       |
| ~[[:digit:]]~    | Decimal digits   |
| ~[[:blank:]]~    | Space/Tab        |
| ~[[:space:]]~    | Whitespace       |
| ~[[:punct:]]~    | Punctuation      |
| ~[[:xdigit:]]~   | Hexadecimal      |
| ~[[:graph:]]~    | Non-space        |
| ~[[:cntrl:]]~    | Control Characters|

** Backreferences
- These are used to match previously matched pattern (subexpression).
- ~\(\)~ (BRE) or ~()~ (ERE) can be use to enclose subexpression that can be use later for backreferencing.
- ~\1~ (reference to the first subexpression) through ~\9~ (referenct to the ninth subexpression)
- ~\n~ matches whatever was matching by ~n~ th parenthesized subexpression.
- A line with two occurrences of *hello* will be match using:
- ~.*~ : any arbitrary number of characters.
#+begin_src bash
\(hello\).*\1
#+end_src

** BRE Operator Precedence
- Highest to lowest in this order.

| Class |  Represents |
| ~[..]~ ~[==]~ ~[::]~         | Char collation |
| ~\~                 | Metachar |
| ~[ ]~               | Bracket expansion |
| ~\(\)~ ~\n~      | subexpressions and backreferences |
| ~*~ ~{ \}~          | Repetition of preceding regex |
|                     | Concatenation |
| ~^~ ~$~             | Anchors |

** ERE Operator Precedence
- Highest to lowest in this order.

| Class |  Represents |
| ~[..]~ ~[==]~ ~[::]~        | Char collation |
| ~\~                 | Metachar |
| ~[ ]~               | Bracket expansion |
| ~( )~      | subexpressions or grouping |
| ~*~ ~+~ ~?~ ~{ }~             | Repetition of preceding regex |
|                     | Concatenation |
| ~^~ ~$~              | Anchors |
| ~|~                       | Alternation |



** Regular Expression Basics
| Expression | Description                         |
| ~.~         | Any character except newline         |
| ~a~         | The character a                     |
| ~ab~        | The string ab                       |
| ~a~         | The character a                     |
| ~b~         | The character b                     |
| ~a*~        | 0 or more occurrences of the character a |
| ~\~         | Escapes a special character         |

*RegEx escape sequences Escaping is a way of treating characters which have a special meaning in regular expressions literlly, rather than as special characters.*

** RegEx Quantifiers
| Expression | Description      |
| ~*~        | 0 or more         |
| ~+~        | 1 or more         |
| ~?~        | 0 or 1            |
| ~{2}~      | Exactly 2         |
| ~{2,5}~    | Between 2 and 5  |
| ~{2,}~     | 2 or more         |


** RegEx Groups and Ranges

| Expression | Description                     |
| ~(...)~    | Capturing group                 |
| ~.~        | Any character except newline ~\n~ |
| ~(a b)~    | Grouping (a and b)              |
| ~[abc]~    | Range (a or b or c)             |
| ~[^abc]~   | Not (a or b or c)               |
| ~[a-q]~    | Lowercase letter from a to q    |
| ~[A-Q]~    | Uppercase letter from A to Q    |
| ~[0-7]~    | Digit from 0 to 7               |

    *Ranges are inclusive*

** RegEx Character Classes

| Expression | Description                          |
| ~[ab-d]~   | One character of: a, b, c, d         |
| ~[^ab-d]~  | One character except: a, b, c, d     |
| ~\d~       | One digit                            |
| ~\D~       | One non-digit                        |
| ~\s~       | One whitespace                       |
| ~\S~       | One non-whitespace                   |
| ~\w~       | One word character                   |
| ~\W~       | One non-word character               |
| ~\x~       | Hexadecimal digit                    |

** RegEx Anchors
| Expression | Description            |
| ~^~        | Start of string        |
| ~$~        | End of string          |
| ~\b~       | Word boundary          |
| ~\B~       | Non-word boundary      |

** RegEx Flags

| Expression | Description                           |
| ~g~        | Global match                          |
| ~i~        | Ignore case                           |
| ~i*~       | Case-sensitive                        |
| ~m~        | ~^~ and ~$~ match start and end of line |
| ~m*~       | Multiple lines                        |
| ~s*~       | Treat string as single line           |
| ~x*~       | Allow comments and whitespace pattern |
| ~e*~       | Evaluate replacement                  |
| ~U*~       | Ungreedy pattern                       |



* grep
*Searches for string which matches pattern with each line in the file.*
*Default engine is BRE*
~grep 'pattern' filename~

** Examples

*** Basic String Search
By default, grep will print all the input lines that match the given search patterns. The newline character ~\n~ is the line separator by default.

We will be using [[RegEx_example.txt]] for example.

#+begin_src bash
grep 'the' ip.txt  #This command will print all the lines contains word "the"
Mountain peaks touch the sky.
Mountain trails wind through the forest.
Ocean waves crash on the shore.
The sun sets, coloring the sky.
#+end_src

#+begin_src bash
printf 'apple\nbanana\nmango\nfig\n' | grep 'an'
~ banana
~ mango
#+end_src

*** Fixed string search

#+begin_src bash
echo 'int a[5] a5' | grep -o 'int'   # -o argument will only print the matching part of the stirng
~ int

echo 'int a[5] a5' | grep -o 'a5'
~ a5

echo 'int a[5] a5' | grep -o 'a[5]'
~ a5    # This commnad again matching a5 but we want to match the a[5] part of the string for that we have to escape the square brackets [].

echo 'int a[5] a5' | grep -o 'a\[5\]'
~ a[5]
# Insted of that we can also use the -F argument

echo 'int a[5] a5' | grep -Fo 'a\[5\]'
~ a[5]
#+end_src

*** Case insensitive search

Using ~-i~ we can perform case insensitive search.

#+begin_src
cat example.txt
Apple
Banana
Mango
Fig
n
grep -i 'apple' example.txt
~ Apple
#+end_src
