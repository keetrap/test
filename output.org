* Pattern Matching
:PROPERTIES:
:CUSTOM_ID: pattern-matching
:END:
** POSIX Standard
:PROPERTIES:
:CUSTOM_ID: posix-standard
:END:
IEEE 1003.1-2001 IEEE Standard for IEEE Information Technology -
Portable Operating System Interface (POSIX (TM))

Ref: https://standards.ieee.org/standard/1003_1-2001.html

** Regex
:PROPERTIES:
:CUSTOM_ID: regex
:END:
- regex is a pattern matching template to filter text.
- *BRE*: POSIX Basic Regular Expression engine
- *ERE*: POSIX Extended Regular Expression engine

** Why learn regex?
:PROPERTIES:
:CUSTOM_ID: why-learn-regex
:END:
- Process input from user.
- Perform string oprations based on pattern.
- Languages: Java, Perl, Python, Ruby, ...
- Tools: grep, sed, awk
- Applications: MySQL, PostgreeSQL, ...
- We will focus on grep here.

*** Special Characters (BRE and ERE)
:PROPERTIES:
:CUSTOM_ID: special-characters-bre-and-ere
:END:
- It is a good practice to enclose the pattern within single / double
  quotes.

| Character(s) | Description                                                                                                      |
|--------------+------------------------------------------------------------------------------------------------------------------|
| =.=          | Any single character except null or newline                                                                      |
| =*=          | Zero or more of /preceding/ character / expression                                                               |
| =[]=         | Any of the enclosed characters/ [[file:%22#character-classes%22][class]]; hyphen (=-=) indicates character range |
| =^=          | Anchor for beginning of line or /negation/ of enclosed characters when used as =[^]=                             |
| =$=          | Anchor for end of line                                                                                           |
| =\=          | Escape special characters                                                                                        |

*** Special Characters (BRE)
:PROPERTIES:
:CUSTOM_ID: special-characters-bre
:END:
| Character(s) | Description                                                                 |
|--------------+-----------------------------------------------------------------------------|
| =\{n,m\}=    | Range of occurrences of preceding pattern at least =n= and utmost =m= times |
| =\(\)=       | Grouping of regular expressions                                             |

*** Special Characters (ERE)
:PROPERTIES:
:CUSTOM_ID: special-characters-ere
:END:
| Character(s) | Description                                                                 |
|--------------+-----------------------------------------------------------------------------|
| ={n,m}=      | Range of occurrences of preceding pattern at least =n= and utmost =m= times |
| =()=         | Grouping of regular expressions                                             |
| =+=          | One of more of preceding character / expression                             |
| =?=          | Zero of one of preceding character / expression                             |
| =\|=         | Logical OR over the patterns                                                |

*** Character Classes
:PROPERTIES:
:CUSTOM_ID: character-classes
:END:
- Character classes follow specific structure, =[:class-name:]=
- The classes should be used within character enclosure braces as
  =[character-class]=

| Class          | Represents         |
|----------------+--------------------|
| =[[:print:]]=  | Printable          |
| =[[:alnum:]]=  | Alphanumeric       |
| =[[:alpha:]]=  | Alphabetic         |
| =[[:lower:]]=  | Lower case         |
| =[[:upper:]]=  | Upper case         |
| =[[:digit:]]=  | Decimal digits     |
| =[[:blank:]]=  | Space / Tab        |
| =[[:space:]]=  | Whitespace         |
| =[[:punct:]]=  | Punctuation        |
| =[[:xdigit:]]= | Hexadecimal        |
| =[[:graph:]]=  | Non-space          |
| =[[:cntrl:]]=  | Control Characters |

*** Backreferences
:PROPERTIES:
:CUSTOM_ID: backreferences
:END:
- These are used to match previously matched pattern (subexpression).
- =\(\)= (BRE) or =()= (ERE) can be used to enclose subexpression that
  can be used later for backreferencing.
- =\1= (reference to the first subexpression) through =\9= (referenct to
  the ninth subexpression)
- =\n= matches whatever was matched by /n/th parenthesized
  subexpression.
- A line with two occurrences of /hello/ will be matched using:
  - =.*= : any arbitrary number of characters.

#+begin_src regex
  \(hello\).*\1
#+end_src

*** BRE Operator Precedence
:PROPERTIES:
:CUSTOM_ID: bre-operator-precedence
:END:
- Highest to lowest in this order.

| Class                | Represents                        |
|----------------------+-----------------------------------|
| =[..]= =[==]= =[::]= | Char collation                    |
| =\=                  | Metachar                          |
| =[ ]=                | Bracket expansion                 |
| =\(\)= =\n=          | subexpressions and backreferences |
| =*= =\{ \}=          | Repetition of preceding regex     |
|                      | Concatenation                     |
| =^= =$=              | Anchors                           |

*** ERE Operator Precedence
:PROPERTIES:
:CUSTOM_ID: ere-operator-precedence
:END:
- Highest to lowest in this order.

| Class                | Represents                    |
|----------------------+-------------------------------|
| =[..]= =[==]= =[::]= | Char collation                |
| =\=                  | Metachar                      |
| =[ ]=                | Bracket expansion             |
| =( )=                | subexpressions or grouping    |
| =*= =+= =?= ={ }=    | Repetition of preceding regex |
|                      | Concatenation                 |
| =^= =$=              | Anchors                       |
| =\|=                 | Alternation                   |

** =grep=
:PROPERTIES:
:CUSTOM_ID: grep
:END:
Searches for string which matches /pattern/ with each line in the file.

*** Default engine is BRE
:PROPERTIES:
:CUSTOM_ID: default-engine-is-bre
:END:
- =grep 'pattern' filename=

*** Examples
:PROPERTIES:
:CUSTOM_ID: examples
:END:
We will consider [[/Week-4/Files/names.txt][names.txt]] for the
explanation. A comment starts with =#= and continues till the end of the
line. * =grep 'pattern' <filename>=

- Looking for a /string/ as a pattern in file /filename/.
  + Print thelines which contain word 'Raman'.

#+begin_src bash
~$ grep 'Raman' names.txt
ED22B902 Raman Singh
#+end_src

- Print for lines which contain pattern /Anu/.
#+begin_src bash
~$ grep 'Anu' names.txt
EE22B905 Anu K. Jain
NA22B906 Anupama Shridhar
#+end_src
    
- Try similar commands in terminal

#+begin_src bash
grep 'Sa' names.txt   # lines containing string 'Sa' together.
grep 'ai' names.txt   # lines containing string 'ai' together.
#+end_src

- Piping is very important feature which can be used ~grep~ any command output.
  + Passing input using pipe to grep and searching the pattern ~ai~.
#+begin_src bash
~$ cat names.txt | grep 'ai' # you have seen similar command earlier !
#+end_src


- ~.~ to match a single character.
#+begin_src bash
~$ cat names.txt | grep 'S.n'
ED22B902 Raman Singh
PH22B907 Vel Sankaran
#+end_src

  +  ~S.n~ matches 3 letters, ~S~ followed any single character and ~n~.
    #+begin_src bash
~$ cat names.txt | grep '.am'     # matches any single character, followed by 'am'
MM22B901 Mary Manickam
ED22B902 Raman Singh
CS22B904 Charles M. Sagayam
NA22B906 Anupama Shridhar
#+end_src

    + ~$~ to match pattern at/towards the end of line.
        #+begin_src bash
    ~$ cat names.txt | grep '.am$'    # '.am' pattern at the end of line.
     MM22B901 Mary Manickam
     CS22B904 Charles M. Sagayam
        #+end_src

    + ~\.~ to match ~.~ literal.
        #+begin_src
      ~$ cat names.txt | grep '\.
      CS22B904 Charles M. Sagayam
      EE22B905 Anu K. Jain
      #+end_src

        #+begin_src bash
~$ cat names.txt | grep '.\.'     # match an Abbreviation
CS22B904 Charles M. Sagayam
EE22B905 Anu K. Jain
#+end_src
    

- ~^~ to match pattern at/from the beginning.
#+begin_src bash
~$ cat names.txt | grep '^E'      # line begins with 'E'
ED22B902 Raman Singh
EE22B905 Anu K. Jain

~$ cat names.txt | grep  -i '^e'  # line begins with 'E' or 'e', case-insensitive (-i).
ED22B902 Raman Singh
EE22B905 Anu K. Jain
#+end_src


   + Try in a terminal
    #+begin_src bash
   cat names.txt | grep '^'
       #+end_src

   + ~\b~ to match word boundary, irrespective of the position of the word.
     #+begin_src bash
   ~$ cat names.txt | grep 'an\b'
   ED22B902 Raman Singh
   PH22B907 Vel Sankaran
   #+end_src

     + Try in terminal
        #+begin_src bash
cat names.txt | grep 'am\b'
#+end_src


- ~[]~ matching a character from characters or range of characters enclosed.
    #+begin_src bash
~$ cat names.txt | grep 'M[ME]'
MM22B901 Mary Manickam
ME22B903 Umair Ahmad
#+end_src
    
  + Try in terminal
     #+begin_src bash
cat names.txt | grep 'E[ED]'      # matches 'EE' or 'ED'
#+end_src

    #+begin_src bash
cat names.txt | grep '[ME]E'      # matches 'ME' or 'EE'
#+end_src

    #+begin_src bash
cat names.txt | grep '[aeiou]'    # matches vowels.
#+end_src

    #+begin_src bash
cat names.txt | grep '[aeiou][aeiou]'  # matches two vowels side by side.
#+end_src



- ~[start-stop]~ Matching any characters specified by range ~start-stop~.
  + ~[1-4]~ : Matches characters in range 1 to 4
    #+begin_src
MM22B901 Mary Manickam
ED22B902 Raman Singh
ME22B903 Umair Ahmad
CS22B904 Charles M. Sagayam
#+end_src
    + Match ~B90~ followed by digits not in range 5 to 7

- ~.*~  match any number of characters including 0.
    #+begin_src bash
~$ cat names.txt | grep 'S.*[mn]'
ED22B902 Raman Singh
CS22B904 Charles M. Sagayam
PH22B907 Vel Sankaran
#+end_src
    
  + Match ~S~, followed by any number of characters ~.*~, then ~m~ or ~n~
  + What if we want to match just names and not part of roll number?
  + We will introduce word boundary before ~S~
    
- ~\{m\}~ preceding character repeats exactly ~m~ times
    
    #+begin_src bash
~$ cat names.txt | grep 'M\{2\}'
MM22B901 Mary Manickam
#+end_src
    
  + ~M~ repeats exactly twice.
  + ~M\{2\}~ : *MM*\22B901
    
- ~\{m,n\}~ preceding character repeats at least ~m~ times and at most ~n~ times.
    
    #+begin_src bash
~$ cat names.txt | grep 'E\{1,2\}'
ED22B902 Raman Singh
ME22B903 Umair Ahmad
EE22B905 Anu K. Jain
#+end_src
  + 'E' repeates once or twice.
  + ~E\{1,2\}~ : *E*\D22B902, M\*E*22B903, *EE*\22B905

- ~{m,\}~ preceding character repeats at least ~m~ times.
  + Try in terminal
    #+begin_src
cat names.txt | grep 'M\{1,\}'    # 'M' repeats at least 1 time.
#+end_src

- ~\{,n\}~ preceding character repeats at most ~n~ times.
  + Try in terminal
    #+begin_src bash
cat names.txt | grep 'M\{,2\}'    # 'M' repeats at most 2 times.
#+end_src
    
- ~\(pattern\)~ grouping 'pattern's and backreferences.
  + The ~pattern~ inside parenthesis can be any valid pattern.
    
    #+begin_src bash
~$ cat names.txt | grep '\(ma\).*\1'
ME22B903 Umair Ahmad
  #+end_src
    
  + pattern matches ~ma~ followed by any number of characters ~.*~, followed by 'ma' ( backreferenced with ~\1~ to the first pattern in parenthesis.)
  + ~\(ma\).*\1~  : U *mair Ahma* d
    #+begin_src bash
~$ cat names.txt | grep '\(a.\)\{3\}'
CS22B904 Charles M. Sagayam
#+end_src

    + ~a~ and any character repeated thrice.
    + ~\(a.\)\{3\}~ : S *agayam*
    + Change 3 to 2 and see the output.
    
  + Try in terminal

      #+begin_src  bash
cat names.txt | grep '\(.a\).*\1'
      #+end_src
    
    + any character and ~a~ ( ~'\(.a\)'~ => 1), followed by any number of characters (~'.*'~), then any character and ~a~ (~'\1'~).
    
    #+begin_src bash
cat names.txt | grep '\(a.\).*\1'
    #+end_src

*** Switch to use ERE
:PROPERTIES:
:CUSTOM_ID: switch-to-use-ere
:END:
- =egrep 'pattern' filename=

- =grep -E 'pattern' filename=

- =+= match preceding pattern once or more number of times.

    #+begin_src terminal
~$ cat names.txt | egrep 'M+'
MM22B901 Mary Manickam
ME22B903 Umair Ahmad
CS22B904 Charles M. Sagayam
#+end_src

- Match 'M' at least once. Similar to =\{1,\}=
    #+begin_src terminal
~$ cat names.txt | egrep '^M+'
MM22B901 Mary Manickam
ME22B903 Umair Ahmad
#+end_src

- Match 'M' at least once at the beginning of the line.


- =*= matches preceding character 0 or more times
    #+begin_src terminal
~$ cat names.txt | egrep '^M*'
    #+end_src

- Match 'M' 0 or more number of times at the beginning of the line.
    + It dumps the whole [[/Week-4/Files/names.txt][names.txt]] file.
      + Try in terminal
              #+begin_src sh
      cat names.txt | egrep 'M*a'
              #+end_src

      + Matches string containing, 'a', 'Ma', 'MMa', 'MMMa'.....

              #+begin_src sh
      cat names.txt | egrep 'M.*a'
      #+end_src

      + Matches ~M~ then any number of characters (=.*=) then ~a~.

- =(pattern)= match subexpression

    #+begin_src terminal
~$ cat names.txt | egrep '(ma)+'
ED22B902 Raman Singh
ME22B903 Umair Ahmad
NA22B906 Anupama Shridhar
    #+end_src

    + matches ~ma~ once or more times.

    + Try in terminal

      #+begin_src sh
cat names.txt | egrep '(ma)*'
#+end_src

    + Matches ~ma~ 0 or more times

      #+begin_src sh
cat names.txt | egrep '(ma){2}'
      #+end_src

    + Matches ~ma~ exactly twice consecutively.

- =(pattern1 | pattern2)= match ~pattern1~ or ~pattern2~

    #+begin_src terminal
~$ cat names.txt | egrep '(ED|ME)'
ED22B902 Raman Singh
ME22B903 Umair Ahmad
    #+end_src

    + Try in terminal

      #+begin_src sh
cat names.txt | egrep '(Anu|Raman)'
      #+end_src

    +  Matches string containing ~Anu~ or ~Raman~

      #+begin_src sh
cat names.txt | egrep '(an|an)$'
      #+end_src

      - Matches with ~am~ or ~an~ at the end of the line.
      - Remove ~$~ and try.

- It is important to gain flexibility to use =grep= on any command.

      + =.{4}$= matches any character 4 times at the end of the line,
        before ensures word boundary, and helps not matching the section.
      + =.{4}$= is equivalent to =....$=

- To list the package names with 4 characters starting with ~g~.
      #+begin_src sh
~$ dpkg-query -W -f'${Section} ${binary:Package}\n' | egrep ' g.{3}$'
interpreters gawk
gnome gdm3
utils gpgv
utils grep
utils gzip
#+end_src

      + To list the package names starting with ~g~ and having 1 to 6 characters.

      #+begin_src terminal
~$ dpkg-query -W -f'${Section} ${binary:Package}\n' | egrep ' g.{1,5}$'
interpreters gawk
gnome gcr
devel gdb
admin gdisk
gnome gdm3
#+end_src

     + To list the package names in section ~math~.
      #+begin_src terminal
~$ dpkg-query -W -f'${Section} ${binary:Package}\n' | egrep '^math'
math bc
math dc
math galculator
math gnome-calculator
#+end_src

     + Try in a terminal and figure out the difference with command above.

      #+begin_src sh
      dpkg-query -W -f'${Section} ${binary:Package}\n' | egrep 'math'
      #+end_src

      - Prints packages or sections having ~math~ as string

      - Try in a terminal

        #+begin_src sh
dpkg-query -W -f'${Section} ${binary:Package}\n' | egrep ' kd.*$'
      #+end_src

      - Prints package names starting with ~kd~

*** Matching character sets with =grep=
:PROPERTIES:
:CUSTOM_ID: matching-character-sets-with-grep
:END:
- We will consider [[/Week-4/Files/chartypes.txt][chartypes.txt]] file
  for demonstration.

- It contains text, special characters as well as control characters.

  - =[[:alpha:]]= matches alphabetic characters.

    To match an alphabetic character at the beginning of the line

    #+begin_src bash
~$ cat chartypes.txt | grep '^[[:alpha:]]'
hello : alphabetical stuff : 5g
l : start lower end upper : H
L : start upper end lower : h
#+end_src

  - To match an alphabetic character at the end of the line

    #+begin_src bash
~$ cat chartypes.txt | grep '[[:alpha:]]$'
hello : alphabetical stuff : 5g
l : start lower end upper : H
L : start upper end lower : h
#+end_src


  -  To match an alphabetic character anywhere in the line

    - Try in a terminal
      #+begin_src bash
cat chartypes.txt | grep '[[:alpha:]]'
    #+end_src

  - =[[:alnum:]]= matches alpha numeric characters.

  -  To match an alpha numeric character at the beginning of the line

        #+begin_src bash
~$ cat chartypes.txt | grep '^[[:alnum:]]'
hello : alphabetical stuff : 5g
l : start lower end upper : H
L : start upper end lower : h
5g : alpha numeric stuff : 42
42 : solution to everything :
 #+end_src


   - To match an alpha numeric character at the end of the line

    #+begin_src bash
~$ cat chartypes.txt | grep '[[:alnum:]]$'
hello : alphabetical stuff : 5g
l : start lower end upper : H
L : start upper end lower : h
5g : alpha numeric stuff : 42
#+end_src


  - To match an alpha numeric character anywhere in the line

    - Try in a terminal

        #+begin_src sh
cat chartypes.txt | grep '[[:alnum:]]'
    #+end_src

    - =[[:digit:]]= matches only numbers or digits

  - To match a digit at the beginning of the line

      #+begin_src bash
~$ cat chartypes.txt | grep '^[[:digit:]]'
5g : alpha numeric stuff : 42
42 : solution to everything :
#+end_src

  -  To match a digit at the end of the line

      #+begin_src bash
~$ cat chartypes.txt | grep '[[:digit:]]$'
5g : alpha numeric stuff : 42
#+end_src


  - To match a digit anywhere in the line

      - Try in a terminal

        #+begin_src sh
cat chartypes.txt | grep '[[:digit:]]'
#+end_src

    - =[[:cntrl:]]= matches control characters.

-  To match a control character

      #+begin_src bash
  ~$ cat chartypes.txt | grep '[[:cntrl:]]'
  42 : solution to everything :
  : start with control C and end with dot : .
  : start with blank end with control char :
  #+end_src
   - The first line contains tab character at the end.

- To output lines which do not match any control characters.
        - =-v= option negates the selection.
        - Try in terminal

            #+begin_src sh
cat chartypes.txt | grep -v '[[:cntrl:]]'
    #+end_src

  - =[[:punct:]]= matches punctuation characters.

    - Punctuation Characters : =~\!@#$%^&*_-+= =[]{}();:,.<>/?""''=

    - To match a punctuation character at the beginning of the line

    #+begin_src bash
~$ cat chartypes.txt | grep '^[[:punct:]]'
, : start with comma end with equals : =
#+end_src

    - Try the questions below.

    - Write a command to match a punctuation character at the end of the
      line.
    - Write a command to match a punctuation character anywhere in the
      line.

- =[[:lower:]]= matches lower case characters

    - To match a lower case character at the beginning of the line

    #+begin_src bash
~$ cat chartypes.txt | grep '^[[:lower:]]'
hello : alphabetical stuff : 5g
l : start lower end upper : H
    #+end_src


    - Try the questions below.

    - Write a command to match a lower case character at the end of the
      line.
    - Write a command to match a lower case character anywhere in the
      line.

- =[[:upper:]]= matches upper case characters

   - To match an upper case character at the beginning of the line

    #+begin_src bash
~$ cat chartypes.txt | grep '^[[:upper:]]'
L : start upper end lower : h
#+end_src

    - Try the questions below.

    - Write a command to match an upper case character at the end of the
      line.
    - Write a command to match an upper case character anywhere in the
      line.

- =[[:print:]]= matches printable characters

    - control characters are not printable.

    - To match a printable character at the end of the line

    #+begin_src bash
~$ cat chartypes.txt | grep '[[:print:]]$'
hello : alphabetical stuff : 5g
l : start lower end upper : H
L : start upper end lower : h
5g : alpha numeric stuff : 42
: start with control C and end with dot : .
, : start with comma end with equals : =
#+end_src


    - Try the questions below.

    - Write a command to match a printable character at the beginning of
      the line.
    - Write a command to match a printable character anywhere in the
      line.

- =[[:blank:]]= matches blank characters (space/tab)

    To match a blank character at the end of the line

    #+begin_src bash
    ~$ cat chartypes.txt | grep '[[:blank:]]$'
    42 : solution to everything :   
    #+end_src

  - The line has tab at the end.

  Try the questions below.

  - Write a command to match a blank character at the beginning of the
    line.
  - Write a command to match a blank character anywhere in the line.

- =[[:space:]]= matches space

  - To match a space at the beginning of the line

      #+begin_src bash
~$ cat chartypes.txt | grep '^[[:space:]]'
: start with blank end with control char :
      #+end_src

    - Try the questions below.

    - Write a command to match a space at the end of the line.
    - Write a command to match a space anywhere in the line.

    - =[[:graph:]]= matches non-space characters.

      To match a non-space characters at the beginning of the line

      #+begin_src terminal
~$ cat chartypes.txt | grep '^[[:graph:]]'
hello : alphabetical stuff : 5g
l : start lower end upper : H
L : start upper end lower : h
5g : alpha numeric stuff : 42
42 : solution to everything :
, : start with comma end with equals : =
#+end_src

      - Try the questions below.

      - Write a command to match a space at the end of the line.
      - Write a command to match a space anywhere in the line.

      - =^$= matches empty lines. The two anchors together match empty
      lines. Use when you want the empty lines in the input to be skipped
      in the output

     - Try in a terminal

      #+begin_src sh
cat chartypes.txt | grep '^$'
      #+end_src

      #+begin_src sh
cat chartypes.txt | grep -v '^$'
      #+end_src

**** More Examples on =grep= Character Sets
:PROPERTIES:
:CUSTOM_ID: more-examples-on-grep-character-sets
:END:
- We will consider [[/Week-4/Files/patterns.txt][patterns.txt]] file.

- It contains some patterns. We will try to match these using =grep=.

- Similar file is used in lecture.

  - To match the line which contains aadhaar number.

    #+begin_src sh
~$ egrep '[[:digit:]]{12}' patterns.txt
Aadhar card number contains 12 digits and can look like 123456781234 for example.
    #+end_src

  - ='[[:digit:]]{12}'= : *123456781234*

- To match the line which contains pincode.

    - Matching only six digits is not feasible, we will consider word
      boundary also.

    #+begin_src sh
    ~$ egrep '\b[[:digit:]]{6}\b' patterns.txt
    Pincodes of cities of Bharat contain 6 digits and that of IITM is 600036.
    #+end_src

    - ='\b[[:digit:]]{6}\b'= : *600036*
    - Try without '\b' and see the difference in output.

  - To match the line which contains roll number.

    - Roll number has a specific pattern, only matching alphanumeric
      characters will not help.

    #+begin_src sh
    ~$ egrep '\b[[:alpha:]]{2}[[:digit:]]{2}[[:alpha:]][[:digit:]]{3}\b' patterns.txt
    Roll numbers in IIT for regular students are of the pattern MM22B001 where the first two letters correspond to the Department code, 2 digits for the year of joining, then the program code character and then a 3 digit number for their roll number within the class
    #+end_src

    - =\b[[:alpha:]]{2}= : *MM*

    - =[[:digit:]]{2}= : *22*

    - =[[:alpha:]]= : *B*

    - =[[:digit:]]{3}\b= : *001*

    - Try the command with pattern - =[[:alnum:]]{8}=

  - To match the line that contains URL.

    - "github.com" and "https://www.github.com" are valid URLs.
    - Notice that the URL contains dot ('.')

    #+begin_src terminal
    ~$ egrep "\b[[:alnum:]]+\.[[:alnum:]]+" patterns.txt
    URLs can be given these days without the protocol like https://www.iitm.ac.in/ They can be given as just github.com for example.
    #+end_src
